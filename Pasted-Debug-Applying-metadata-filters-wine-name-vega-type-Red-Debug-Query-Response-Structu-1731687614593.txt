Debug: Applying metadata filters:

{
"wine_name":"vega"
"type":"Red"
}
Debug: Query Response Structure:

Response type:

main()classpinecone.core.openapi.data.model.query_response.QueryResponse(*args, **kwargs)
NOTE: This class is auto generated by OpenAPI Generator.
Ref: https://openapi-generator.tech

Do not edit the class manually.

Attributes:
  allowed_values (dict): The key is the tuple path to the attribute
      and the for var_name this is (var_name,). The value is a dict
      with a capitalized key describing the allowed value and an allowed
      value. These dicts store the allowed enum values.
  attribute_map (dict): The key is attribute name
      and the value is json key in definition.
  discriminator_value_class_map (dict): A dict to go from the discriminator
      variable value to the discriminator class name.
  validations (dict): The key is the tuple path to the attribute
      and the for var_name this is (var_name,). The value is a dict
      that stores validations for max_length, min_length, max_items,
      min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
      inclusive_minimum, and regex.
  additional_properties_type (tuple): A tuple of classes accepted
      as additional properties values.
additional_properties_typetuple	(<class 'bool'>, <class 'datetime.date'>, <class 'datetime.datetime'>, <class 'dict'>, <class 'float'>, <class 'int'>, <class 'list'>, <class 'str'>, <class 'NoneType'>)
allowed_valuesdict	{}
attribute_mapdict	{'results': 'results', 'matches': 'matches', 'namespace': 'namespace', 'usage': 'usage'}
discriminatorNoneType	None
openapi_typesdict	{'results': ([<class 'pinecone.core.openapi.data.model.single_query_results.SingleQueryResults'>],), 'matches': ([<class 'pinecone.core.openapi.data.model.scored_vector.ScoredVector'>],), 'namespace': (<class 'str'>,), 'usage': (<class 'pinecone.core.openapi.data.model.usage.Usage'>,)}
read_only_varsdict	{}
required_propertiesset	{'_configuration', '_spec_property_naming', '_path_to_item', '_visited_composed_classes', '_check_type', '_data_store'}
validationsdict	{}
getfunction	returns the value of an attribute or some default value if the attribute was not set
set_attributefunction	No docs available
to_dictfunction	Returns the model properties as a dict
to_strfunction	Returns the string representation of the model
Number of matches: 0

No matching wines found. Please try different search criteria.